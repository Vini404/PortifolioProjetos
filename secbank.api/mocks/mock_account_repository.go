// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\VINICIUS-VN\Desktop\projetos\PortifolioProjetos\secbank.api\interfaces\repository/IAccountRepository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "secbank.api/dto/account"
	models "secbank.api/models"
)

// MockIAccountRepository is a mock of IAccountRepository interface.
type MockIAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepositoryMockRecorder
}

// MockIAccountRepositoryMockRecorder is the mock recorder for MockIAccountRepository.
type MockIAccountRepositoryMockRecorder struct {
	mock *MockIAccountRepository
}

// NewMockIAccountRepository creates a new mock instance.
func NewMockIAccountRepository(ctrl *gomock.Controller) *MockIAccountRepository {
	mock := &MockIAccountRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepository) EXPECT() *MockIAccountRepositoryMockRecorder {
	return m.recorder
}

// R_Create mocks base method.
func (m *MockIAccountRepository) R_Create(customer models.Account) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Create", customer)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_Create indicates an expected call of R_Create.
func (mr *MockIAccountRepositoryMockRecorder) R_Create(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Create", reflect.TypeOf((*MockIAccountRepository)(nil).R_Create), customer)
}

// R_Delete mocks base method.
func (m *MockIAccountRepository) R_Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// R_Delete indicates an expected call of R_Delete.
func (mr *MockIAccountRepositoryMockRecorder) R_Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Delete", reflect.TypeOf((*MockIAccountRepository)(nil).R_Delete), id)
}

// R_Get mocks base method.
func (m *MockIAccountRepository) R_Get(id int) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Get", id)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_Get indicates an expected call of R_Get.
func (mr *MockIAccountRepositoryMockRecorder) R_Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Get", reflect.TypeOf((*MockIAccountRepository)(nil).R_Get), id)
}

// R_GetAccountByCustomer mocks base method.
func (m *MockIAccountRepository) R_GetAccountByCustomer(customerID int) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_GetAccountByCustomer", customerID)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_GetAccountByCustomer indicates an expected call of R_GetAccountByCustomer.
func (mr *MockIAccountRepositoryMockRecorder) R_GetAccountByCustomer(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_GetAccountByCustomer", reflect.TypeOf((*MockIAccountRepository)(nil).R_GetAccountByCustomer), customerID)
}

// R_GetInformationAccount mocks base method.
func (m *MockIAccountRepository) R_GetInformationAccount(id int) (*dto.InformationAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_GetInformationAccount", id)
	ret0, _ := ret[0].(*dto.InformationAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_GetInformationAccount indicates an expected call of R_GetInformationAccount.
func (mr *MockIAccountRepositoryMockRecorder) R_GetInformationAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_GetInformationAccount", reflect.TypeOf((*MockIAccountRepository)(nil).R_GetInformationAccount), id)
}

// R_Get_By_Number_And_Digit mocks base method.
func (m *MockIAccountRepository) R_Get_By_Number_And_Digit(number, digit string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Get_By_Number_And_Digit", number, digit)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_Get_By_Number_And_Digit indicates an expected call of R_Get_By_Number_And_Digit.
func (mr *MockIAccountRepositoryMockRecorder) R_Get_By_Number_And_Digit(number, digit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Get_By_Number_And_Digit", reflect.TypeOf((*MockIAccountRepository)(nil).R_Get_By_Number_And_Digit), number, digit)
}

// R_List mocks base method.
func (m *MockIAccountRepository) R_List() (*[]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_List")
	ret0, _ := ret[0].(*[]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_List indicates an expected call of R_List.
func (mr *MockIAccountRepositoryMockRecorder) R_List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_List", reflect.TypeOf((*MockIAccountRepository)(nil).R_List))
}

// R_Update mocks base method.
func (m *MockIAccountRepository) R_Update(customer models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Update", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// R_Update indicates an expected call of R_Update.
func (mr *MockIAccountRepositoryMockRecorder) R_Update(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Update", reflect.TypeOf((*MockIAccountRepository)(nil).R_Update), customer)
}
