// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\VINICIUS-VN\Desktop\projetos\PortifolioProjetos\secbank.api\interfaces\repository/IBalanceRepository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "secbank.api/dto/balance"
	models "secbank.api/models"
)

// MockIBalanceRepository is a mock of IBalanceRepository interface.
type MockIBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBalanceRepositoryMockRecorder
}

// MockIBalanceRepositoryMockRecorder is the mock recorder for MockIBalanceRepository.
type MockIBalanceRepositoryMockRecorder struct {
	mock *MockIBalanceRepository
}

// NewMockIBalanceRepository creates a new mock instance.
func NewMockIBalanceRepository(ctrl *gomock.Controller) *MockIBalanceRepository {
	mock := &MockIBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockIBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBalanceRepository) EXPECT() *MockIBalanceRepositoryMockRecorder {
	return m.recorder
}

// R_Create mocks base method.
func (m *MockIBalanceRepository) R_Create(balance models.Balance) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Create", balance)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_Create indicates an expected call of R_Create.
func (mr *MockIBalanceRepositoryMockRecorder) R_Create(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Create", reflect.TypeOf((*MockIBalanceRepository)(nil).R_Create), balance)
}

// R_Extract mocks base method.
func (m *MockIBalanceRepository) R_Extract(accountID int) ([]*dto.ExtractResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Extract", accountID)
	ret0, _ := ret[0].([]*dto.ExtractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_Extract indicates an expected call of R_Extract.
func (mr *MockIBalanceRepositoryMockRecorder) R_Extract(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Extract", reflect.TypeOf((*MockIBalanceRepository)(nil).R_Extract), accountID)
}

// R_GetByAccountID mocks base method.
func (m *MockIBalanceRepository) R_GetByAccountID(accountID int) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_GetByAccountID", accountID)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// R_GetByAccountID indicates an expected call of R_GetByAccountID.
func (mr *MockIBalanceRepositoryMockRecorder) R_GetByAccountID(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_GetByAccountID", reflect.TypeOf((*MockIBalanceRepository)(nil).R_GetByAccountID), accountID)
}

// R_Update mocks base method.
func (m *MockIBalanceRepository) R_Update(balance *models.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "R_Update", balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// R_Update indicates an expected call of R_Update.
func (mr *MockIBalanceRepositoryMockRecorder) R_Update(balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "R_Update", reflect.TypeOf((*MockIBalanceRepository)(nil).R_Update), balance)
}
